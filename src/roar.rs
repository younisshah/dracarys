extern crate reqwest;
extern crate serde_json;
extern crate hyper;

use self::reqwest::Client;
use std::io::Read;
use self::serde_json::Value;

use types::{DracarysError, KongAPI};

header! { (ContentType, "Content-Type") => [String] }

/// Kong's Admin add API
static ADD_API_URI: &'static str = "/apis/";

pub type DracarysAddResult = Result<String, DracarysError>;

/// Kong is the main type for
/// creating a Kong client
pub struct Kong {
    kong_admin_uri: &'static str,
}

impl Kong {
    /// Returns a new Kong client instance
    ///
    /// # Arguments
    ///
    /// * `kong_admin_uri` - base URL where Kong is running
    ///
    /// # Panics
    ///
    /// `new` panics if `kong_admin_uri` is an empty string literal.
    ///
    /// # Example
    ///
    /// `let kong = dracarys::roar::Kong::new("http://127.0.0.1:8001");`
    ///
    pub fn new(kong_admin_uri: &'static str) -> Self {
        assert!(kong_admin_uri != "");
        Kong { kong_admin_uri }
    }
    /// Adds a new API in Kong and Returns `DracarysAddResult` which is Result<String, DracarysError>.
    /// The Result String is the id of the API generated by Kong.
    ///
    /// # Arguments
    ///
    /// * `kong_api`- An instance of `kong_api` struct
    ///
    /// # Example
    ///
    /// `let api = dracarys::types::KongAPI {
    ///         name: "roar".to_string(),
    ///         hosts: vec!["httpbin.org".to_string()],
    ///         uris: vec![],
    ///         preserve_host: false,
    ///         upstream_url: "http://httpbin.org".to_string(),
    ///         https_only: false,
    ///         http_if_terminated: true,
    /// };
    /// println!("Result {}", kong.add_api(&api).unwrap());`
    pub fn add_api(&self, kong_api: &KongAPI) -> DracarysAddResult {
        let client = Client::new().expect("Couldn't create a new HTTP client");
        let payload = serde_json::to_string(kong_api).unwrap();

        let mut response = client.post(&format!("{}{}", self.kong_admin_uri, ADD_API_URI)[..])
            .unwrap()
            .body(payload)
            .header(ContentType("application/json".to_owned()))
            .send()
            .expect("Couldn't add a new API in Kong");

        let mut result = String::new();
        response.read_to_string(&mut result).expect("Failed to add api");
        let api: Value = serde_json::from_str(&result[..]).unwrap();
        match api["id"] {
            serde_json::Value::String(ref id) => Ok(id.to_string()),
            _ => Err(DracarysError::ADDError("failed to add API in Kong")),
        }
    }
}




